<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: admin_user.proto
//   Date: 2016-10-29 12:46:24

namespace UserAdmin {

  class PermissionBlob extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $admin_user_email = null;
    
    /**  @var string */
    public $application = null;
    
    /**  @var \UserAdmin\Authorization[]  */
    public $auth = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'UserAdmin.PermissionBlob');

      // REQUIRED STRING admin_user_email = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "admin_user_email";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING application = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "application";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE auth = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "auth";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\UserAdmin\Authorization';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <admin_user_email> has a value
     *
     * @return boolean
     */
    public function hasAdminUserEmail(){
      return $this->_has(1);
    }
    
    /**
     * Clear <admin_user_email> value
     *
     * @return \UserAdmin\PermissionBlob
     */
    public function clearAdminUserEmail(){
      return $this->_clear(1);
    }
    
    /**
     * Get <admin_user_email> value
     *
     * @return string
     */
    public function getAdminUserEmail(){
      return $this->_get(1);
    }
    
    /**
     * Set <admin_user_email> value
     *
     * @param string $value
     * @return \UserAdmin\PermissionBlob
     */
    public function setAdminUserEmail( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <application> has a value
     *
     * @return boolean
     */
    public function hasApplication(){
      return $this->_has(2);
    }
    
    /**
     * Clear <application> value
     *
     * @return \UserAdmin\PermissionBlob
     */
    public function clearApplication(){
      return $this->_clear(2);
    }
    
    /**
     * Get <application> value
     *
     * @return string
     */
    public function getApplication(){
      return $this->_get(2);
    }
    
    /**
     * Set <application> value
     *
     * @param string $value
     * @return \UserAdmin\PermissionBlob
     */
    public function setApplication( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <auth> has a value
     *
     * @return boolean
     */
    public function hasAuth(){
      return $this->_has(3);
    }
    
    /**
     * Clear <auth> value
     *
     * @return \UserAdmin\PermissionBlob
     */
    public function clearAuth(){
      return $this->_clear(3);
    }
    
    /**
     * Get <auth> value
     *
     * @param int $idx
     * @return \UserAdmin\Authorization
     */
    public function getAuth($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <auth> value
     *
     * @param \UserAdmin\Authorization $value
     * @return \UserAdmin\PermissionBlob
     */
    public function setAuth(\UserAdmin\Authorization $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <auth>
     *
     * @return \UserAdmin\Authorization[]
     */
    public function getAuthList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <auth>
     *
     * @param \UserAdmin\Authorization $value
     * @return \UserAdmin\PermissionBlob
     */
    public function addAuth(\UserAdmin\Authorization $value){
     return $this->_add(3, $value);
    }
  }
}

namespace UserAdmin {

  class Authorization extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var string */
    public $slug = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'UserAdmin.Authorization');

      // REQUIRED STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING slug = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "slug";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING value = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \UserAdmin\Authorization
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \UserAdmin\Authorization
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <slug> has a value
     *
     * @return boolean
     */
    public function hasSlug(){
      return $this->_has(2);
    }
    
    /**
     * Clear <slug> value
     *
     * @return \UserAdmin\Authorization
     */
    public function clearSlug(){
      return $this->_clear(2);
    }
    
    /**
     * Get <slug> value
     *
     * @return string
     */
    public function getSlug(){
      return $this->_get(2);
    }
    
    /**
     * Set <slug> value
     *
     * @param string $value
     * @return \UserAdmin\Authorization
     */
    public function setSlug( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(3);
    }
    
    /**
     * Clear <value> value
     *
     * @return \UserAdmin\Authorization
     */
    public function clearValue(){
      return $this->_clear(3);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(3);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \UserAdmin\Authorization
     */
    public function setValue( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace UserAdmin {

  class UserServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param UserAdmin\PermissionBlob $input
     */
    public function updateUser(\UserAdmin\PermissionBlob $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/UserAdmin.UserService/updateUser', $argument, '\UserAdmin\PermissionBlob::deserialize', $metadata, $options);
    }
  }
}
